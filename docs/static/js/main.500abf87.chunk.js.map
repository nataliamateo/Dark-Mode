{"version":3,"sources":["components/SwitchBtn.js","components/Header.js","components/People.js","components/PeopleList.js","components/App.js","serviceWorker.js","index.js"],"names":["SwitchBtn","localStorage","getItem","document","body","classList","add","remove","onClick","btnSwitch","querySelector","toggle","contains","setItem","className","id","Header","href","alt","People","props","src","image","name","PeopleList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAmCeA,G,sBAhCG,WAoBhB,MAN0C,SAAtCC,aAAaC,QAAQ,aACvBC,SAASC,KAAKC,UAAUC,IAAI,QAE5BH,SAASC,KAAKC,UAAUE,OAAO,QAI/B,4BAAQC,QApBU,WAClB,IAAMC,EAAYN,SAASO,cAAc,WACzCP,SAASC,KAAKC,UAAUM,OAAO,QAC/BF,EAAUJ,UAAUM,OAAO,UAGvBR,SAASC,KAAKC,UAAUO,SAAS,QACnCX,aAAaY,QAAQ,YAAa,QAElCZ,aAAaY,QAAQ,YAAa,UAWNC,UAAU,SAASC,GAAG,UAClD,8BACE,uBAAGD,UAAU,4BAEf,8BACE,uBAAGA,UAAU,gCC2BNE,EApDA,WACb,OACE,4BAAQF,UAAU,UAChB,kBAAC,EAAD,MACA,yBAAKA,UAAU,eACb,wBAAIA,UAAU,qBACZ,wBAAIA,UAAU,eACZ,uBAAGG,KAAK,UAAUC,IAAI,UACpB,yBAAKJ,UAAU,mBACb,uBAAGA,UAAU,sCACb,2CAIN,wBAAIA,UAAU,eACZ,uBAAGG,KAAK,UAAUC,IAAI,UACpB,yBAAKJ,UAAU,mBACb,uBAAGA,UAAU,8CACb,2CAIN,wBAAIA,UAAU,eACZ,uBAAGG,KAAK,YAAYC,IAAI,YACtB,yBAAKJ,UAAU,mBACb,uBAAGA,UAAU,0CACb,4CAIN,wBAAIA,UAAU,eACZ,uBAAGG,KAAK,UAAUC,IAAI,UACpB,yBAAKJ,UAAU,mBACb,uBAAGA,UAAU,sDACb,2CAIN,wBAAIA,UAAU,eACZ,uBAAGG,KAAK,WAAWC,IAAI,WACrB,yBAAKJ,UAAU,mBACb,uBAAGA,UAAU,qCACb,+CClCDK,G,YATA,SAACC,GACd,OACE,yBAAKN,UAAU,QACb,yBAAKA,UAAU,cAAcO,IAAKD,EAAME,MAAOJ,IAAKE,EAAMG,OAC1D,yBAAKT,UAAU,eAAeM,EAAMG,SCU3BC,EAbI,WACjB,OACE,yBAAKV,UAAU,oBACb,kBAAC,EAAD,CAAQS,KAAK,gBAAgBD,MAAM,wBACnC,kBAAC,EAAD,CAAQC,KAAK,iBAAiBD,MAAM,yBACpC,kBAAC,EAAD,CAAQC,KAAK,cAAcD,MAAM,sBACjC,kBAAC,EAAD,CAAQC,KAAK,cAAcD,MAAM,sBACjC,kBAAC,EAAD,CAAQC,KAAK,kBAAkBD,MAAM,0BACrC,kBAAC,EAAD,CAAQC,KAAK,kBAAkBD,MAAM,4BCI5BG,MAXf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,kBAAC,EAAD,SCEYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAAS+B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.500abf87.chunk.js","sourcesContent":["import React from 'react';\nimport '../stylesheets/SwitchBtn.scss';\n\nconst SwitchBtn = () => {\n  const handleClick = () => {\n    const btnSwitch = document.querySelector('#switch');\n    document.body.classList.toggle('dark');\n    btnSwitch.classList.toggle('active');\n\n    // save mode on localstorage\n    if (document.body.classList.contains('dark')) {\n      localStorage.setItem('dark-mode', 'true');\n    } else {\n      localStorage.setItem('dark-mode', 'false');\n    }\n  };\n\n  if (localStorage.getItem('dark-mode') === 'true') {\n    document.body.classList.add('dark');\n  } else {\n    document.body.classList.remove('dark');\n  }\n\n  return (\n    <button onClick={handleClick} className='switch' id='switch'>\n      <span>\n        <i className='fas fa-sun switch-icon'></i>\n      </span>\n      <span>\n        <i className='fas fa-moon switch-icon'></i>\n      </span>\n    </button>\n  );\n};\n\nexport default SwitchBtn;\n","import React from 'react';\nimport '../stylesheets/Header.scss';\nimport SwitchBtn from './SwitchBtn.js';\n\nconst Header = () => {\n  return (\n    <header className='header'>\n      <SwitchBtn />\n      <nav className='header__nav'>\n        <ul className='header__nav--list'>\n          <li className='list__links'>\n            <a href='#Inicio' alt='Inicio'>\n              <div className='list__container'>\n                <i className='fas fa-home list__container--icon'></i>\n                <div>Inicio </div>\n              </div>\n            </a>\n          </li>\n          <li className='list__links'>\n            <a href='#Perfil' alt='Perfil'>\n              <div className='list__container'>\n                <i className='far fa-user list__container--icon profile'></i>\n                <div>Perfil </div>\n              </div>\n            </a>\n          </li>\n          <li className='list__links'>\n            <a href='#Mensajes' alt='Mensajes'>\n              <div className='list__container'>\n                <i className='far fa-envelope list__container--icon'></i>\n                <div>Mensajes</div>\n              </div>\n            </a>\n          </li>\n          <li className='list__links'>\n            <a href='#Amigos' alt='Amigos'>\n              <div className='list__container'>\n                <i className='fas fa-user-friends list__container--icon friends'></i>\n                <div> Amigos</div>\n              </div>\n            </a>\n          </li>\n          <li className='list__links'>\n            <a href='#Ajustes' alt='Ajustes'>\n              <div className='list__container'>\n                <i className='fas fa-cog list__container--icon'></i>\n                <div>Ajustes</div>\n              </div>\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport '../stylesheets/People.scss';\n\nconst People = (props) => {\n  return (\n    <div className='item'>\n      <img className='item--photo' src={props.image} alt={props.name}></img>\n      <div className='item--title'>{props.name}</div>\n    </div>\n  );\n};\n\nexport default People;\n","import React from 'react';\nimport '../stylesheets/PeopleList.scss';\nimport People from './People';\n\nconst PeopleList = () => {\n  return (\n    <div className='people-container'>\n      <People name='Totoro Ghibli' image='./images/totoro.jpg' />\n      <People name='Chihiro Ghibli' image='./images/chihiro.jpg' />\n      <People name='Haku Ghibli' image='./images/haku.jpg' />\n      <People name='Howl Ghibli' image='./images/howl.jpg' />\n      <People name='Calcifer Ghibli' image='./images/calcifer.gif' />\n      <People name='Mononoke Ghibli' image='./images/mononoke.jpg' />\n    </div>\n  );\n};\n\nexport default PeopleList;\n","import React from 'react';\nimport '../stylesheets/App.scss';\nimport Header from './Header';\nimport PeopleList from './PeopleList';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Header />\n      <div className='content'>\n        <PeopleList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}